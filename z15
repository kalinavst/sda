–ê–ª–≥–æ—Ä–∏—Ç–º–∏—è e —Å—Ç–∞–Ω–∞–ª–∞ –º–Ω–æ–≥–æ –µ–ª–∏—Ç–Ω–∞ –¥—ä—Ä–∂–∞–≤–∞ –∏ –≤—Å–µ–∫–∏ –¥–µ–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏–µ—Ç–æ –π —Ä–∞—Å—Ç–µ! –î—ä—Ä–∂–∞–≤–Ω–∏—è—Ç –≥–ª–∞–≤–∞ —Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω–∏—Ç–µ —Å–∏ –∏ –Ω–∞–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü–∏ –¥–∞ —Å–ª–µ–¥—è—Ç –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ—Ç–æ.

–ï–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª, –∫–æ–π—Ç–æ –∏—Å–∫–∞ –¥–∞ –∑–Ω–∞–µ –µ –º–µ–¥–∏–∞–Ω–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ. –¢–æ–≤–∞ –µ —á–∏—Å–ª–æ, –∫–æ–µ—Ç–æ —Ä–∞–∑–¥–µ–ª—è –Ω–∞—Å–µ–ª–µ–Ω–∏–µ—Ç–æ –Ω–∞ –¥–≤–µ —Ä–∞–≤–Ω–∏ —á–∞—Å—Ç–∏ - –µ–¥–Ω–∞—Ç–∞ —á–∞—Å—Ç –∏–º–∞ –ø–æ–≤–µ—á–µ –ø–∞—Ä–∏ –≤ —Å–º–µ—Ç–∫–∞—Ç–∞ —Å–∏, –æ—Ç —Ç–æ–≤–∞ —á–∏—Å–ª–æ, –∞ –¥—Ä—É–≥–∞—Ç–∞ –ø–æ-–º–∞–ª–∫–æ.

–ü–æ–≤–µ—á–µ –∑–∞ —Ç–æ–≤–∞ –∫–∞–∫–≤–æ –µ –º–µ–¥–∏–∞–Ω–∞

–ë–∏–≤–∞–π–∫–∏ –º–Ω–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞ –¥—ä—Ä–∂–∞–≤–∞, —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ —Ç–æ–∑–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª –µ —Ç—Ä—É–¥–Ω–æ, —Ç—ä–π –∫–∞—Ç–æ –≤—Å–µ–∫–∏ –¥–µ–Ω –Ω–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω —Å–µ –ø—Ä–µ—Å–µ–ª–≤–∞ –≤ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—è. –ü–æ–º–æ–≥–Ω–µ—Ç–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü–∏—Ç–µ –∫–∞—Ç–æ —Å–ª–µ–¥ –≤—Å–µ–∫–∏ –Ω–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Ç–ø–µ—á–∞—Ç–∞—Ç–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ –º–µ–¥–∏–∞–Ω–∞—Ç–∞.

Input Format

–ü—ä—Ä–≤–∏—è—Ç —Ä–µ–¥ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –≤—Ö–æ–¥ —Å—ä–¥—ä—Ä–∂–∞ –µ–¥–Ω–æ —Ü—è–ª–æ —á–∏—Å–ª–æ  (–±—Ä–æ–π –≥—Ä–∞–∂–¥–∞–Ω–∏).

–°–ª–µ–¥–≤–∞—Ç  –Ω–∞ –±—Ä–æ–π —Ü–µ–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∏ —á–∏—Å–ª–∞ , –≤—Å—è–∫–æ –Ω–∞ –Ω–æ–≤ —Ä–µ–¥ (–ø–∞—Ä–∏—Ç–µ –Ω–∞ –ø–æ—Ä–µ–¥–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω).

Constraints



–ê–ª–≥–æ—Ä–∏—Ç–º–∏—è –µ –ø—Ä–∏–µ–ª–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–∞ –Ω–µ –¥–∞–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–∞ —Ö–æ—Ä–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∞ —Å—É–º–∞ –≤ —Å–º–µ—Ç–∫–∞—Ç–∞ —Å–∏ üòï

Output Format

–°–ª–µ–¥ –≤—Å–µ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω, –æ—Ç–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞ –Ω–æ–≤ —Ä–µ–¥ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ –æ–±–Ω–æ–≤–µ–Ω–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç –¥–æ –ø—ä—Ä–≤–∏—è –∑–Ω–∞–∫ —Å–ª–µ–¥ –¥–µ—Å–µ—Ç–∏—á–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ç–∞—è (—Å —Ç–æ—á–Ω–æ—Å—Ç –¥–æ ).

Sample Input 0

10
1
2
3
4
5
6
7
8
9
10
Sample Output 0

1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
Sample Input 1

4
3
11
4
2
Sample Output 1

3.0
7.0
4.0
3.5

#include <bits/stdc++.h>
using namespace std;


void print(int arr[], int n)
{
    
    priority_queue<int> smaller;
 
    
    priority_queue<int,vector<int>,greater<int> > larger;
 
    double mediana = (double)arr[0];
    smaller.push(arr[0]);
 
    cout << mediana << endl;
 
    
    for (int i=1; i < n; i++)
    {
        int x = arr[i];
 
        
        if (smaller.size() > larger.size())
        {
            if (x < mediana)
            {
                larger.push(smaller.top());
                smaller.pop();
                smaller.push(x);
            }
            else
                larger.push(x);
 
            mediana = (smaller.top() + larger.top())/2.0;
        }
 
        
        else if (smaller.size()==larger.size())
        {
            if (x < mediana)
            {
                smaller.push(x);
                mediana = (double)smaller.top();
            }
            else
            {
                larger.push(x);
                mediana = (double)larger.top();
            }
        }
 
       
        else
        {
            if (x > mediana)
            {
                smaller.push(larger.top());
                larger.pop();
                larger.push(x);
            }
            else
                smaller.push(x);
 
            mediana = (smaller.top() + larger.top())/2.0;
        }
 
        cout << mediana << endl;
    }
}
 

int main()
{
    ios_base::sync_with_stdio(false);
     cin.tie(nullptr);
       cout << fixed << setprecision(1);
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    print(arr, n);
    return 0;
}


