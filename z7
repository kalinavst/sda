Студентите от втори курс се разпределили по групи за проекта, който трябва да пишат по УСИ. Също така са излезли и темите, по които е възможно да се работи. Всеки отбор си има число, което съответства на познанията на хората в него, a всяка тема има стойност, която съответсва на сложността ѝ. Всеки отбор би искал да избере тема, която има сложност, колкото знанията на екипа и ако няма таква да избере тази с най-близката стойнст. Ако има две еднакво близки ще избереат по-лесната.

Input Format

На пъривя ред на стандартния вход ще се подадат две числа n,m: съответно броя на темите и екипите. На втория ред на стандартния вход ще се подадат n числа : съответно сложността на всяка тема На третия ред на стандартния вход ще се подадат m числа: съответно общите познанията на всеки екип

Constraints

Стойностите на числата на втория и третия ред не надвишават 2*10^9. 

Output Format

На един ред на стандартния изход изведете съответно за всеки един екип сложността на темата която би избрал той.

Sample Input 0

5 7
2 4 6 8 10 
1 10 5 3 17 7 9
Sample Output 0

2
10
4
2
10
6
8


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int closest(int a[], int n, int k){
    if(k<a[0])return a[0];
    if(k>a[n-1])return a[n-1];
    
    int start=0;
    int end=n-1;
    while(start<=end){
        int mid=(start+end)/2;
        if(k<a[mid]){
            end=mid-1;
        }
        else if(k>a[mid]){
            start=mid+1;
        }
        else return a[mid];
        
        
        
        
    }
    if((a[start] - k) < (k - a[end])) return a[start];
    else return a[end];
    
    
    
}

int main() {
     int n, m;
    cin>>n>>m;
    int themes[n];
    for(int i=0;i<n;i++){
        cin>>themes[i];
    }
    int groups[m];
    for(int i=0;i<m;i++){
        cin>>groups[i];
        
    }
    sort(themes,themes+n);
    for(int i=0;i<m;i++){
        groups[i]=closest(themes,n,groups[i]);
        
        
        
    }
    for(int i=0;i<m;i++){
        cout<<groups[i]<<endl;}
    
    return 0;
}
